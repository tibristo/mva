# System imports
import logging
from itertools import chain
from uuid import uuid4
rand_uuid = lambda: uuid4().hex

# ROOT imports
from ROOT import THStack, TH1, TCanvas, TPad, TLegend, SetOwnership, TLine


# Set up logging
logging.basicConfig()
logger = logging.getLogger(__name__)


def _get_histogram_iterable(histograms_or_stack, unpack_stacks = False):
    """Returns a list of TH1 objects from a collection of histograms.

    Args:
        histograms_or_stack: A single histogram, an iterable of histograms, or a
            THStack object which represents the collection of histograms

    Returns:
        An iterable of the histograms in the provided collection.
    """
    #DR if no input object return empty list
    if histograms_or_stack is None:
        return []
    # Check if we are using a THStack
    if isinstance(histograms_or_stack, THStack):
        if unpack_stacks:
            # Extract histograms from the stack
            return histograms_or_stack.GetHists()
        else:
            return (histograms_or_stack,)
    elif isinstance(histograms_or_stack, TH1):
        # Create an iterable of the single histogram
        return (histograms_or_stack,)

    # Must already be an iterable
    return histograms_or_stack

def _get_combined_histogram(histograms_or_stack):
    """Returns a combined TH1 object from a collection of histograms.

    Args:
        histograms_or_stack: A single histogram, an iterable of histograms, or a
            THStack object which represents the collection of histograms

    Returns:
        A single TH1 object which is a combination of the provided histograms.
    """
    # Convert the histograms to an iterable
    histos = _get_histogram_iterable(histograms_or_stack, True)

    # Grab the first histogram
    try:
        result = histos[0].Clone(rand_uuid())
        result.Sumw2()
    except IndexError:
        # Look out for an empty list
        return None

    # Add the others to it
    for i in xrange(1, len(histos)):
        result.Add(histos[i])
   
    return result

def create_plot_with_ratio(numerator_histograms_or_stack, 
                           denominator_histograms_or_stack,
                           canvas_name = 'canvas',
                           canvas_width = 1024.0,
                           canvas_height = 768.0,
                           do_ratio = True,
                           ratio_plot_fraction = 0.35,
                           ratio_plot_title = 'Data / MC',
                           make_legend = True):
    """This function creates a canvas object with two plots on it, a main plot
    and a ratio plot.

    The canvas generated by this function will contain two sub-pads, one with
    all histograms plotted and a plot below it with the ratio of the numerator
    histograms to the denominator histograms.  The numerator and denominator 
    histograms will not be converted to stacks, so if you pass a list of
    histograms, they will simply be plotted on top of each other.  It is up to
    you to create a THStack if you want them stacked.  Also, aside from the
    ratio plot, no styling is applied to any of the provided histograms.

    Args:
        numerator_histograms_or_stack: A single histogram, an iterable of
            histograms, or a THStack object which represents the data to use in
            the numerator of the ratio division.
        denominator_histograms_or_stack: A single histogram, an iterable of
            histograms, or a THStack object which represents the data to use in
            the denominator of the ratio division.

    Returns:
        A canvas object containing the two subpads.
    """

    #DR if ratio_plot_fraction is small, switch off the ratio plot
    if ratio_plot_fraction < 1E-3:
        do_ratio=False

    if not do_ratio:    
        denominator_histograms_or_stack=None
        
    # Create our ratio histogram if necessary
    if do_ratio:
        # Calculate the histograms that we are going to use for division
        ratio_histo = _get_combined_histogram(numerator_histograms_or_stack)
        denominator_histo = _get_combined_histogram(
            denominator_histograms_or_stack
        )

        # Calculate the ratio
        if ratio_histo.GetSumw2N() == 0:
            ratio_histo.Sumw2()
        ratio_histo.Divide(denominator_histo)
        ratio_histo.SetStats(0)
        ratio_histo.SetMarkerStyle(21)

    # Create our canvas
    canvas = TCanvas(canvas_name, 
                     canvas_name,
                     int(canvas_width),
                     int(canvas_height))
    if do_ratio:
        canvas.SetBottomMargin(0.0)

    # Create the plot pad
    plot_pad = TPad(canvas_name + '_plot',
                    canvas_name + '_plot',
                    0.0,
                    ratio_plot_fraction + 0.0075 if do_ratio else 0.0,
                    1.0,
                    1.0)
    if do_ratio:
        plot_pad.SetTopMargin(0.0)
        plot_pad.SetBottomMargin(0.0)
    plot_pad.Draw()
    plot_pad.cd()

    # Compute maximum value for axes
    all_histos = chain(_get_histogram_iterable(numerator_histograms_or_stack),
                       _get_histogram_iterable(denominator_histograms_or_stack))

    max_value = max([h.GetMaximum() for h in all_histos])

    # Create a legend if requested
    legend = None
    if make_legend:
        legend_height = 200.0 # Pixels, maybe make this configurable as an 
                              # argument
        legend_bottom_margin = 50.0
        pad_1_height = canvas_height * (plot_pad.GetY2() - plot_pad.GetY1())
        max_value *= (pad_1_height + legend_height + legend_bottom_margin) \
                     / pad_1_height
        max_value *= 1.1 # Add a bit of an extra margin
        legend = TLegend(0.5,
                         (canvas_height - legend_height)/canvas_height,
                         1.0,
                         0.98 if do_ratio else 0.93)

        legend.SetTextSize(0.03)
        legend.SetBorderSize(0) # No border
        legend.SetFillStyle(0) # Transparent

    # Do our plotting.  As part of this, draw all stacks first, since the rest
    # of the histograms will be drawn as points.
    all_histos = list(
        chain(_get_histogram_iterable(numerator_histograms_or_stack),
              _get_histogram_iterable(denominator_histograms_or_stack))
    )
    def cmp(h1, h2):
        h1_stack = isinstance(h1, THStack)
        h2_stack = isinstance(h2, THStack)
        if h1_stack == h2_stack:
            return 0
        elif h1_stack and not h2_stack:
            return -1
        return 1
    all_histos.sort(cmp)
    first = True
    for histo in all_histos:
        histo.SetMaximum(max_value)
        draw_options = 'ep' if not isinstance(histo, THStack) else ''
        if first:
            # Draw the histogram (this has to be done before using 
            # GetHistogram())
            histo.Draw(draw_options)

            # Disable the axis if doing a ratio plot
            if do_ratio:
                if isinstance(histo, THStack):
                    histo.GetHistogram().GetXaxis().SetTickLength(0)
                    histo.GetHistogram().GetXaxis().SetLabelOffset(999)
                else:
                    histo.GetXaxis().SetTickLength(0)
                    histo.GetXaxis().SetLabelOffset(999)
            else:        
                if isinstance(histo, THStack):
                    histo.GetHistogram().GetXaxis().SetTitleSize(0.08)
                    histo.GetHistogram().GetXaxis().SetTitleOffset(0.90)
                    #histo.GetHistogram().GetXaxis().SetLabelSize(0.08)
                    #print "DRDR xt0",histo.GetHistogram().GetXaxis().GetTitle()
                else:
                    histo.GetXaxis().SetTitleSize(0.08)
                    histo.GetXaxis().SetTitleOffset(0.90)
                    #histo.GetXaxis().SetLabelSize(0.08)
                    #print "DRDR xt1",histo.GetXaxis().GetTitle()


            # Style up the y axis
            if isinstance(histo, THStack):
                y_title = histo.GetHists()[0].GetYaxis().GetTitle()
                histo.GetHistogram().GetYaxis().SetTitle(y_title)
                histo.GetHistogram().GetYaxis().SetTitleSize(0.05)
                histo.GetHistogram().GetYaxis().SetTitleOffset(0.8)
            else:
                histo.GetYaxis().SetTitleSize(0.05)
                histo.GetYaxis().SetTitleOffset(0.8)

            first = False
            histo.Draw(draw_options+"same")
        else:
            histo.Draw(draw_options + 'same')

    # Fill in and draw the legend.  We have to grab all histograms again, this
    # time unpacking any THStack objects, that way each histogram will have its
    # own entry on the plot.
    if make_legend:
        all_histos = chain(
            _get_histogram_iterable(numerator_histograms_or_stack, True),
            _get_histogram_iterable(denominator_histograms_or_stack, True)
        )
        # FIXME order should be reversed. And data should be "fp"
        for histo in all_histos:
            legend.AddEntry(histo, histo.GetTitle(), 'f')
        legend.Draw()

    # Create the ratio pad if necessary
    if do_ratio:
        # Create the ratio pad
        canvas.cd()
        ratio_pad = TPad(canvas_name + '_ratio',
                         canvas_name + '_ratio',
                         0.0,
                         0.0,
                         1.0,
                         ratio_plot_fraction - 0.0075)
        ratio_pad.SetTopMargin(0.0)
        ratio_pad.SetGridy(True)
        ratio_pad.Draw()
        ratio_pad.cd()

        # Set up the ratio pad labels
        ratio_histo.GetXaxis().SetTitleSize(0.08)
        ratio_histo.GetXaxis().SetTitleOffset(0.90)
        ratio_histo.GetXaxis().SetLabelSize(0.08)
        ratio_histo.GetYaxis().SetTitle(ratio_plot_title)
        ratio_histo.GetYaxis().SetTitleOffset(0.43)
        ratio_histo.GetYaxis().SetTitleSize(0.08)
        ratio_histo.GetYaxis().SetLabelSize(0.08)

        # Draw the ratio histogram
        ratio_histo.Draw('ep')

        # Draw a line at 1
        line_min = ratio_histo.GetBinLowEdge(1)
        max_bin = ratio_histo.GetNbinsX()
        line_max = ratio_histo.GetBinLowEdge(max_bin) \
                   + ratio_histo.GetBinWidth(max_bin)
        unit_line = TLine(line_min,
                          1.0,
                          line_max,
                          1.0)
        unit_line.SetLineColor(2) # Red
        unit_line.SetLineWidth(2)
        unit_line.Draw('same')

        # Now redraw the ratio histogram again, so that the points lie on top of
        # the red line, but draw same so that the axes/ticks don't cover the red
        # line
        ratio_histo.Draw('epsame')

    # Update the canvas
    canvas.cd()
    canvas.Update()

    # HACK: Work around ROOT/PyROOT's terrible memory management
    SetOwnership(canvas, False)
    SetOwnership(plot_pad, False)
    if legend:
        SetOwnership(legend, False)
    if do_ratio:
        SetOwnership(ratio_histo, False) # DR inclue in do_ratio test
        SetOwnership(ratio_pad, False)
        SetOwnership(unit_line, False)

    return canvas

