#include <boost/python.hpp>

#include <map>
#include <vector>
#include <string>
#include <iostream>
#include <cstdlib>

#include "TH1F.h"
#include "TF1.h"
#include "TString.h"
#include "TFile.h"
#include "TObject.h"

using namespace boost::python;

BOOST_PYTHON_MODULE(corrandsysts)
{

  float (CorrAndSysts::*Get_HiggsNLOEWKCorrectionx1)(CAS::EventType, float) = &CorrAndSysts::Get_HiggsNLOEWKCorrectionx1;
  float (CorrAndSysts::*Get_HiggsNLOEWKCorrectionx2)(ROOT::TString, float) = &CorrAndSysts::Get_HiggsNLOEWKCorrectionx1; //inline
  float (CorrAndSysts::*Get_BkgpTCorrectionx1)(CAS::EventType, float) = &CorrAndSysts::Get_BkgpTCorrectionx1;
  float (CorrAndSysts::*Get_BkgpTCorrectionx2)(ROOT::TString, float) = &CorrAndSysts::Get_BkgpTCorrectionx2;//inline
  float (CorrAndSysts::*Get_ToppTCorrectionx1)(CAS::EventType, float) = &CorrAndSysts::Get_ToppTCorrectionx1;
  float (CorrAndSysts::*Get_ToppTCorrectionx2)(ROOT::TString, float) = &CorrAndSysts::Get_ToppTCorrectionx2;//inline
  class_<>("CorrsAndSysts",init<ROOT::TString,bool>())
    .def(init<int, int, bool>())
    .def("Initialize", &CorrAndSysts::Initialise)
    .def("SetDebug", &CorrAndSysts::SetDebug)//inline
    .def("WriteHistsToFile", &CorrAndSysts::WriteHistsToFile)
    .def("Get_HiggsNLOEWKCorrection", &CorrAndSysts::Get_HiggsNLOEWKCorrectionx1)
    .def("Get_HiggsNLOEWKCorrection", &CorrAndSysts::Get_HiggsNLOEWKCorrectionx2)//inline
    .def("Get_BkgpTCorrection", &CorrAndSysts::Get_BkgpTCorrectionx1)
    .def("Get_BkgpTCorrection", &CorrAndSysts::Get_BkgpTCorrectionx2)
    .def("Get_ToppTCorrection", &CorrAndSysts::Get_ToppTCorrectionx1)
    .def("Get_ToppTCorrection", &CorrAndSysts::Get_ToppTCorrectionx2)

  // Bkg DeltaPhi correction
  float Get_BkgDeltaPhiCorrection(CAS::EventType type, float DeltaPhi, int njet);
  inline float Get_BkgDeltaPhiCorrection(TString evtType, float DeltaPhi, int njet)
  { return Get_BkgDeltaPhiCorrection(m_typeNames[evtType.Data()], DeltaPhi, njet); }

  // Systematics on distributions
  float Get_SystematicWeight(CAS::EventType type, float VpT, float Mbb, float avgTopPt, float DeltaPhi, int njet, CAS::Systematic sys=CAS::Nominal, CAS::SysVar var=CAS::Up, CAS::SysBin bin=CAS::None);
  float Get_SystematicWeight(CAS::EventType type, float VpT, float Mbb, float avgTopPt, float DeltaPhi, int njet, TString sysName);

  inline float Get_SystematicWeight(TString evtType, float VpT, float Mbb, float avgTopPt, float DeltaPhi, int njet, CAS::Systematic sys, CAS::SysVar var, CAS::SysBin bin)
  { return Get_SystematicWeight(m_typeNames[evtType.Data()], VpT, Mbb, avgTopPt, DeltaPhi, njet, sys, var, bin); }

  inline float Get_SystematicWeight(TString evtType, float VpT, float Mbb, float avgTopPt, float DeltaPhi, int njet, TString sysName)
  { return Get_SystematicWeight(m_typeNames[evtType.Data()], VpT, Mbb, avgTopPt, DeltaPhi, njet, sysName); }


  // forge the normalized syste name from the enums
  inline std::string GetSystName(CAS::Systematic sys, CAS::SysBin bin, CAS::SysVar var)
  { return m_systNames[sys]+m_binNames[bin]+m_varNames[var]; }

  // inverse function
  void GetSystFromName(TString name, CAS::Systematic& sys, CAS::SysBin& bin, CAS::SysVar& var);
  CAS::EventType GetEventType(TString name);
  CAS::SysBin GetSysBin(float vpt);2


  int m_debug;

  // string to enums or enums to string
  std::map<std::string, CAS::EventType> m_typeNames;
  std::map<CAS::Systematic, std::string> m_systNames;
  std::map<CAS::SysVar, std::string> m_varNames;
  std::map<CAS::SysBin, std::string> m_binNames;
  std::map<std::string, CAS::Systematic> m_systFromNames;
  std::map<std::string, CAS::SysVar> m_varFromNames;
  std::map<std::string, CAS::SysBin> m_binFromNames;

  Float_t pTbins[6];

  bool m_draw;
  bool m_zero;
  bool m_one;
  bool m_two;
  bool m_seven;
  bool m_eight;

  // use TH* to store weights ; seems easier to maintain if ever we need e.g 2-d corrections
  // corrections
  TH1F* m_h_WHlvbbNLOEWKCorrection;
  TH1F* m_h_ZHllbbNLOEWKCorrection;
  TH1F* m_h_ZHvvbbNLOEWKCorrection;
  TH1F* m_h_WpTCorrection;
  TH1F* m_h_ZpTCorrection;
  TH1F* m_h_WDeltaPhiCorrection2Jet;
  TH1F* m_h_WDeltaPhiCorrection3Jet;
  TH1F* m_h_ZDeltaPhiCorrection;
  TH1F* m_h_topPtCorrection;

  // binned systematics
  TH1F* m_h_SysWbbPtW;
  TH1F* m_h_SysStopPt;
  TH1F* m_h_SysWccPtW;
  TH1F* m_h_SysWllPtW;
  TH1F* m_h_SysZbbPtZ;
  TH1F* m_h_SysZccPtZ;
  TH1F* m_h_SysZllPtZ;

  // continuous systematics
  TH1F* m_h_SysTheoryWHlvbbPt;
  TH1F* m_h_SysTheoryZHllbbPt;
  TH1F* m_h_SysTheoryZHvvbbPt;
  TF1* m_f_WDPhiCorr;
  TF1* m_f_ZDPhiCorr;
  TF1* m_f_SysZbbMbb;
  TF1* m_f_SysWbbMbb;
  TF1* m_f_SysTopMbb;
  TF1* m_f_SysStopMbb;
  TF1* m_f_SysWMbb;
  TF1* m_f_SysZMbb;


  std::map<TString, TObject*> m_allHists;

  public:


};
